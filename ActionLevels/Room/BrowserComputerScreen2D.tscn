[gd_scene load_steps=14 format=2]

[ext_resource path="res://imported_assets/computer/better-close.png" type="Texture" id=1]
[ext_resource path="res://ActionLevels/Room/BrowserComputerScreen2D.gd" type="Script" id=2]

[sub_resource type="Shader" id=15]
code = "shader_type canvas_item;

uniform vec4 color : hint_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

uniform bool outline_left = true;
uniform bool outline_top = true;
uniform bool outline_right = true;
uniform bool outline_bottom = true;

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			
			// Skip sides based on uniform settings
			if ((!outline_left && i < 0.0) || (!outline_top && j < 0.0) || (!outline_right && i > 0.0) || (!outline_bottom && j > 0.0)) {
				continue;
			}
			
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	
	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
		
		uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
		
		if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[sub_resource type="ShaderMaterial" id=16]
shader = SubResource( 15 )
shader_param/color = Color( 0.788235, 0.894118, 0.870588, 1 )
shader_param/width = 10.0
shader_param/pattern = 2
shader_param/inside = false
shader_param/add_margins = true
shader_param/outline_left = true
shader_param/outline_top = true
shader_param/outline_right = true
shader_param/outline_bottom = true

[sub_resource type="Gradient" id=17]
offsets = PoolRealArray( 0, 0.92598, 1 )
colors = PoolColorArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture2D" id=18]
gradient = SubResource( 17 )
width = 480
height = 360

[sub_resource type="Shader" id=19]
code = "shader_type canvas_item;

uniform vec4 color : hint_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

uniform bool outline_left = true;
uniform bool outline_top = true;
uniform bool outline_right = true;
uniform bool outline_bottom = true;

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			
			// Skip sides based on uniform settings
			if ((!outline_left && i < 0.0) || (!outline_top && j < 0.0) || (!outline_right && i > 0.0) || (!outline_bottom && j > 0.0)) {
				continue;
			}
			
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	
	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
		
		uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
		
		if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[sub_resource type="ShaderMaterial" id=20]
shader = SubResource( 19 )
shader_param/color = Color( 0.788235, 0.894118, 0.870588, 1 )
shader_param/width = 2.0
shader_param/pattern = 0
shader_param/inside = true
shader_param/add_margins = true
shader_param/outline_left = false
shader_param/outline_top = false
shader_param/outline_right = false
shader_param/outline_bottom = true

[sub_resource type="Gradient" id=21]
colors = PoolColorArray( 0.858824, 0.803922, 0.941176, 1, 0.858824, 0.803922, 0.941176, 1 )

[sub_resource type="GradientTexture2D" id=22]
gradient = SubResource( 21 )
width = 480
height = 25

[sub_resource type="RectangleShape2D" id=25]
extents = Vector2( 50, 50 )

[sub_resource type="Gradient" id=23]
colors = PoolColorArray( 1, 1, 1, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture2D" id=24]
gradient = SubResource( 23 )
width = 480
height = 300

[node name="Browser" type="Sprite"]
material = SubResource( 16 )
texture = SubResource( 18 )
script = ExtResource( 2 )

[node name="WindowBar" type="Sprite" parent="."]
unique_name_in_owner = true
material = SubResource( 20 )
position = Vector2( 0, -167 )
texture = SubResource( 22 )

[node name="URLAddress" type="Sprite" parent="WindowBar"]
unique_name_in_owner = true

[node name="CloseIcon" type="Sprite" parent="WindowBar"]
unique_name_in_owner = true
position = Vector2( 228, -1 )
scale = Vector2( 0.2, 0.2 )
texture = ExtResource( 1 )

[node name="CloseIconArea2D" type="Area2D" parent="WindowBar/CloseIcon"]

[node name="CollisionShape2D" type="CollisionShape2D" parent="WindowBar/CloseIcon/CloseIconArea2D"]
position = Vector2( 0.00012207, 0 )
scale = Vector2( 1, 1 )
shape = SubResource( 25 )

[node name="BrowserPage" type="Sprite" parent="."]
unique_name_in_owner = true
position = Vector2( 0, 12.5 )
scale = Vector2( 1, 1.11667 )
texture = SubResource( 24 )

[connection signal="input_event" from="WindowBar/CloseIcon/CloseIconArea2D" to="." method="_on_CloseIconArea2D_input_event"]
[connection signal="mouse_entered" from="WindowBar/CloseIcon/CloseIconArea2D" to="." method="_on_CloseIconArea2D_mouse_entered"]
[connection signal="mouse_exited" from="WindowBar/CloseIcon/CloseIconArea2D" to="." method="_on_CloseIconArea2D_mouse_exited"]
