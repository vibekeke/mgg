[gd_scene load_steps=23 format=2]

[ext_resource path="res://ActionLevels/Room/ComputerScreen2D.gd" type="Script" id=1]
[ext_resource path="res://sounds/computer/minimize_008.wav" type="AudioStream" id=2]
[ext_resource path="res://sounds/computer/maximize_008.wav" type="AudioStream" id=3]
[ext_resource path="res://ActionLevels/Room/BrowserComputerScreen2D.tscn" type="PackedScene" id=4]
[ext_resource path="res://imported_assets/computer/fullscreen.png" type="Texture" id=5]
[ext_resource path="res://Components/LightAlteringComponent.tscn" type="PackedScene" id=6]

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

uniform vec4 color : hint_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	
	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
		
		uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
		
		if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/width = 2.0
shader_param/pattern = 2
shader_param/inside = false
shader_param/add_margins = true

[sub_resource type="Gradient" id=1]
colors = PoolColorArray( 0.921569, 0.137255, 0.835294, 1, 0.921569, 0.137255, 0.835294, 1 )

[sub_resource type="GradientTexture2D" id=2]
gradient = SubResource( 1 )
width = 960
height = 540

[sub_resource type="Shader" id=13]
code = "shader_type canvas_item;

uniform vec4 color : hint_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

uniform bool outline_left = true;
uniform bool outline_top = true;
uniform bool outline_right = true;
uniform bool outline_bottom = true;

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			
			// Skip sides based on uniform settings
			if ((!outline_left && i < 0.0) || (!outline_top && j < 0.0) || (!outline_right && i > 0.0) || (!outline_bottom && j > 0.0)) {
				continue;
			}
			
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	
	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
		
		uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
		
		if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[sub_resource type="ShaderMaterial" id=14]
shader = SubResource( 13 )
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/width = 1.0
shader_param/pattern = 0
shader_param/inside = true
shader_param/add_margins = true
shader_param/outline_left = true
shader_param/outline_top = true
shader_param/outline_right = false
shader_param/outline_bottom = true

[sub_resource type="Gradient" id=7]
colors = PoolColorArray( 0.141176, 0.364706, 0.854902, 1, 0.141176, 0.364706, 0.854902, 1 )

[sub_resource type="GradientTexture2D" id=8]
gradient = SubResource( 7 )
width = 960
height = 32

[sub_resource type="Shader" id=11]
code = "shader_type canvas_item;

uniform vec4 color : hint_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

uniform bool outline_left = true;
uniform bool outline_top = true;
uniform bool outline_right = true;
uniform bool outline_bottom = true;

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			
			// Skip sides based on uniform settings
			if ((!outline_left && i < 0.0) || (!outline_top && j < 0.0) || (!outline_right && i > 0.0) || (!outline_bottom && j > 0.0)) {
				continue;
			}
			
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	
	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
		
		uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
		
		if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 11 )
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/width = 1.0
shader_param/pattern = 0
shader_param/inside = true
shader_param/add_margins = true
shader_param/outline_left = false
shader_param/outline_top = true
shader_param/outline_right = true
shader_param/outline_bottom = false

[sub_resource type="Gradient" id=9]
colors = PoolColorArray( 0.490196, 0.717647, 0, 1, 0.490196, 0.717647, 0, 1 )

[sub_resource type="GradientTexture2D" id=10]
gradient = SubResource( 9 )
height = 31

[sub_resource type="RectangleShape2D" id=15]
extents = Vector2( 260, 260 )

[sub_resource type="Animation" id=3]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("DesktopBackground:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 1e-05, 1 ) ]
}

[sub_resource type="Animation" id=4]
resource_name = "appear"
length = 2.0
tracks/0/type = "value"
tracks/0/path = NodePath("DesktopBackground:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 1, 1 ) ]
}

[sub_resource type="Environment" id=16]
background_mode = 4
glow_enabled = true

[node name="ComputerScreen2D" type="Node2D"]
script = ExtResource( 1 )

[node name="DesktopBackground" type="Sprite" parent="."]
unique_name_in_owner = true
material = SubResource( 6 )
scale = Vector2( 1e-05, 1 )
texture = SubResource( 2 )

[node name="DesktopBar" type="Sprite" parent="DesktopBackground"]
material = SubResource( 14 )
position = Vector2( 0, 254 )
texture = SubResource( 8 )

[node name="StartMenu" type="Sprite" parent="DesktopBackground/DesktopBar"]
material = SubResource( 12 )
position = Vector2( -448, 0 )
texture = SubResource( 10 )

[node name="Browser" parent="DesktopBackground" instance=ExtResource( 4 )]

[node name="FullscreenIcon" type="Sprite" parent="DesktopBackground"]
unique_name_in_owner = true
position = Vector2( 451, -241 )
scale = Vector2( 0.0510932, 0.0504406 )
texture = ExtResource( 5 )
__meta__ = {
"_edit_group_": true
}

[node name="FullscreenIconArea2D" type="Area2D" parent="DesktopBackground/FullscreenIcon"]

[node name="CollisionShape2D" type="CollisionShape2D" parent="DesktopBackground/FullscreenIcon/FullscreenIconArea2D"]
position = Vector2( 0.000976562, -0.000488281 )
shape = SubResource( 15 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
unique_name_in_owner = true
playback_speed = 4.5
anims/RESET = SubResource( 3 )
anims/appear = SubResource( 4 )

[node name="MaximiseDesktop" type="AudioStreamPlayer" parent="."]
unique_name_in_owner = true
stream = ExtResource( 3 )
volume_db = -10.0

[node name="MinimiseDesktop" type="AudioStreamPlayer" parent="."]
unique_name_in_owner = true
stream = ExtResource( 2 )
volume_db = -10.0

[node name="ComputerTween" type="Tween" parent="."]
unique_name_in_owner = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 16 )

[node name="LightAlteringComponent" parent="." instance=ExtResource( 6 )]
affected_by_light = false

[connection signal="input_event" from="DesktopBackground/FullscreenIcon/FullscreenIconArea2D" to="." method="_on_FullscreenIconArea2D_input_event"]
[connection signal="mouse_entered" from="DesktopBackground/FullscreenIcon/FullscreenIconArea2D" to="." method="_on_FullscreenIconArea2D_mouse_entered"]
[connection signal="mouse_exited" from="DesktopBackground/FullscreenIcon/FullscreenIconArea2D" to="." method="_on_FullscreenIconArea2D_mouse_exited"]
[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_AnimationPlayer_animation_finished"]
